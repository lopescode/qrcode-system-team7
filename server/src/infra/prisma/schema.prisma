// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserPhone {
  id          Int    @id @default(autoincrement())
  countryCode String
  areaCode    String
  phoneNumber String @unique
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
}

model UserAddress {
  id            Int     @id @default(autoincrement())
  streetAddress String
  neighborhood  String
  city          String
  state         String
  country       String
  postalCode    String
  complement    String?
  user          User    @relation(fields: [userId], references: [id])
  userId        Int
}

model User {
  id        Int           @id @default(autoincrement())
  cpf       String        @unique
  password  String
  firstName String
  lastName  String
  phones    UserPhone[]
  addresses UserAddress[]
  orders    Order[]
}

model ProductIngredient {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  description String?
  products    IngredientOnProduct[]
}

model IngredientOnProduct {
  product      Product           @relation(fields: [productId], references: [id])
  productId    Int
  ingredient   ProductIngredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  createdAt    DateTime          @default(now())

  @@id([productId, ingredientId])
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  imageUrl    String
  description String
  products    Product[]
}

model Product {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  description         String
  price               String
  imageUrl            String
  category            ProductCategory       @relation(fields: [categoryId], references: [id])
  categoryId          Int
  orders              ProductsOnOrder[]
  ingredientOnProduct IngredientOnProduct[]
}

model ProductsOnOrder {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int

  @@id([productId, orderId])
}

enum PaymentStatus {
  PENDING
  PAID
}

model Order {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  price         String
  paymentStatus PaymentStatus
  user          User              @relation(fields: [userId], references: [id])
  userId        Int
  products      ProductsOnOrder[]
}
